<?php

/** 
 * Author: Eugen Mayer (http://kontextwork.de)
 * Converted from D6 to D7 by iStryker
 */
 
/**
 * Implements hook_help().
 */
function tagging_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tagging':
      return t('Tagging offers a javascript user interface to add free tagging to content.  If you install additional submodules then it also makes suggestion for you.');
  }
}

/**
 * Implements hook_init().
 */
function tagging_init() {
}
 
/**
 * Implements hook_menu().
 */
function tagging_menu() {
  $items = array();
  $items['admin/config/content/tagging'] = array(
        'title' => 'Tagging configuration',
        'description' => 'Configuration options for the tagging module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('tagging_admin_settings'),
        'access callback' => 'user_access',
        'access arguments' => array('administer site configuration'),
        'file' => 'tagging.admin.inc',
        'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function tagging_theme() {
  return array(
    'tagging_widget_input' => array('variables' => array('element' => NULL) ),
    'tagging_widget_button' => array('variables' => array('vid' => NULL) ),
    'tagging_widget_wrapper' => array('variables' => array('content' => NULL, 'vid' => NULL) ),
    'tagging_suggestions_list' => array(
    'variables' => array('suggestions' => array(), 'vid' => NULL )
  ),
    'tagging_tags_list' => array(
    'variables' => array('tags' => array(), 'vid' => NULL) 
    ),   
  );
}

/**
 * Implements hook_field_widget_info().
 */
function tagging_field_widget_info() {
  return array(
    'tagging_taxonomy_autocomplete' => array(
      'label' => t('Tagging module autocomplete javascript UI widget'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'size' => 40,
        'autocomplete_path' => 'taxonomy/autocomplete',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function tagging_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $settings = $instance['widget']['settings'];
  
  // iStryker April 7th, 2011: maybe a problem in the future.  only 1 allowed value is allowed so far. 
  // there is an option for parent, which I have no clue what it is for
  $machine_name = $field['settings']['allowed_values'][0]['vocabulary']; 
  
  //query database to get the vocabulary id
  $vids = db_query('SELECT tv.vid FROM {taxonomy_vocabulary} tv WHERE tv.machine_name = :machine_name', array(':machine_name' => $machine_name));
  //I don't know if I need to foreach here, but it doesn't break anything.  Could allow multiple vocabularys in the future
  //Pulled from Example #1 of http://api.drupal.org/api/drupal/includes--database--database.inc/function/db_query/7
  foreach ($vids as $vid) {
    if (!empty($instance['description'] )) {
      $description = t($instance['description']);
    }
    else {
      $description = t('Type and press enter to add the tag');
    }
  
    $tags = array();
    foreach ($items as $item) {
      $tags[$item['tid']] = isset($item['taxonomy_term']) ? $item['taxonomy_term'] : taxonomy_term_load($item['tid']);
    }
  
    // order (temporary comments)
    // Active Tags: term1(x), term2(x), etc
    // Textfield (autocomplete),  Add button
    // Suggestions
    
    $element['field_terms'] = array(
      '#markup' => theme('tagging_tags_list', array('tags' => $tags, 'vid' => $vid->vid)),
    );

    $element['input_field'] = array (
      '#type' => 'item',
      '#attributes' => array(
        'class' => array(
          'taggin-widget-input-wrapper', 
          'clearfix',
        )
      ),
      '#description' => $description,
    );
    
    $element['input_field']['textfield'] = array(
      '#type' => 'textfield',
      '#default_value' => '',
      '#autocomplete_path' => $settings['autocomplete_path'] . '/' . $field['field_name'],
      '#size' => $settings['size'],
      '#maxlength' => 1024,
      '#attributes' => array(
        'class' => array(
          'tagging-widget-input',
          'tagging-widget-input-' . $vid->vid,
        ),
        'id' => 'tagging-widget-input-' . $vid->vid,
      ),
    );
    
    $element['input_field']['button'] = array(
      '#markup' => theme('tagging_widget_button', array('element' => $element, 'vid' => $vid->vid)),
    );
    // add suggestions here
    $element['suggestions']['#value'] = _tagging_add_suggestions( array(
        'nid' => $form['nid']['#value'],
	      'vid' => $vid->vid,
      )
    );

    $element['suggestions']['#markup'] = theme('tagging_suggestions_list', array('suggestions' => $element['suggestions']['#value'], 'vid' => $vid->vid));
    
    // Stores terms
    $element['input_field']['terms'] = array(
      '#type' => 'hidden',
      '#default_value' => taxonomy_implode_tags($tags),
      '#size' => $settings['size'],
      '#maxlength' => 1024,
      '#attributes' => array('class' => array('tagging-widget-target-' . $vid->vid)),
      '#theme_wrappers' => array(),
    );
  }
  drupal_add_css(drupal_get_path('module', 'tagging') . '/css/tagging.css');
  drupal_add_js(drupal_get_path('module', 'tagging') . '/js/tagging.plugin.js');
  
  $element += array(
    '#type' => 'item',
    '#attributes' => array('class' => 
                       'tagging-widget-input-wrapper', 
                       'clearfix'
                     ),
    '#element_validate' => array('tagging_taxonomy_autocomplete_validate'),
  );
  
  
  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function tagging_field_widget_settings_form($field, $instance) {
}

/**
 * Implements hook_field_widget_error().
 */
function tagging_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 *  
 * Called by form to validate terms
 * @param $element
 * @param $form_state
 */
function tagging_taxonomy_autocomplete_validate($element, &$form_state) {
	// combines the value(s) in the textfield and saved values
	if (!empty($element['input_field']['terms']['#value'])) {
		 if (!empty($element['input_field']['textfield']['#value'])) {
		   $element['#value'] =  $element['input_field']['textfield']['#value'] . ',' . $element['input_field']['terms']['#value'];
		 } 
		 else {
	     $element['#value'] = $element['input_field']['terms']['#value'];	 	  
		 }
	}
  taxonomy_autocomplete_validate($element, $form_state);
}


/**
 * Rendering the widget button
 */
function theme_tagging_widget_button($variables) {
  return '<a class="tagging-button-container" href="#" title="' . t('Add') . '"><span class="tagging-button tagging-button-' . $variables['vid'] . '"></span></a>';
}

/**
 * Rendering the wrapper of the widget
 */
function theme_tagging_widget_wrapper($variables) {
  return "<div id='tagging-widget-container'>" . $variables['content'] . "</div>";
}

/**
 * Rendering suggestions for a specific vocabulary
 */
function theme_tagging_tags_list($variables) {
  $cur_tags = '';  
  // they are sorted already
  foreach ($variables['tags'] as $term) {
    if ($term == '') {
      continue;
    }
    // TODO: use # here...but out of any reason it gets encoded to %23 in html
    // using trim here, as mostly the old tagging system was "one, two, three"..
    $term = "<span class='tagging-tag' id=tagging-tag-" . $term->tid . "'>" . _tagging_check_tag($term->name) . "</span>";

	// iStryker TODO: I believe l function has change for 7
    $link = l($term, '', array('html' => TRUE, 'attributes' => array('title' => t('Remove tag'), 'fragment' => '#')));
    $cur_tags .= $link;
  }
  return "<div class='tagging-curtags-wrapper tagging-curtags-wrapper-" . $variables['vid'] . "'><label>" . t('Assigned Tags:') . "</label>$cur_tags</div>";
}

function _tagging_check_tag($tag) {
  $tag = trim(check_plain($tag));
  return $tag;
}

/**
 * Rendering suggestions
 * we need $vid for namespacing only
 */
function theme_tagging_suggestions_list($variables) {
    $suggested_tags = '';
    // They are sorted already.
    foreach ($variables['suggestions'] as $term) {
      if ($term['#name'] == '') {
        continue;
      }
      // TODO: Use # here...but out of any reason it gets encoded to %23 in html.
      $title = t('Add this already existing tag');
      $class = 'tagging-suggest-tag';
      if (array_key_exists('#new', $term) && $term['#new'] == TRUE) {
        $class .= ' tagging-suggestion-new';
		// iStryker TODO:  $title, gets call all the time, I think it should only be once
        $title = t('Add this new tag');
      }
      $term = "<span id='tagging-" . $variables['vid'] . "' class='{$class}'>" . _tagging_check_tag($term['#name']) . "</span>";
	  // iStryker TODO: I believe l function has change for 7
      $link = l($term, '', array('html' => TRUE, 'attributes' => array('title' => $title )));
      $suggested_tags .= $link;
    }
    // If we have any suggestions, then place the wrapper.
    if ($suggested_tags != '') {
      return "<div class='tagging-suggestions-wrapper tagging-suggestions-wrapper-" . $variables['vid'] . "'><label>"
                                . t('Suggestions') . ":</label>$suggested_tags</div>";
    }
    // We have no suggestions, so no need to show any output
    return '';
}

/**
 * Defining new hook: hook_tagging_suggestion
 * Modules can use this hook to implement their methods to provide suggestions for tagging
 * the current node
 */
function _tagging_add_suggestions($variables) {
  // TODO: Quite expensive here. Should we only fetch the body? This might
  // change in the future
  $node = node_load($variables['nid']);
  /*
  * @vid: This is the vid the suggestions have been called for. You can use this to decide whether you
  *       want to suggest something or not for this vocabulary
  * @node: This is the complete expanded node object. Use this to e.g. base your suggestions on the body
  *        of the node or the title or whatever you wish on
  */ 
  // dsm('suggestions in add suggestions');
  $suggestions = module_invoke_all('tagging_suggestions', $variables['vid'], $node);
  // dsm($suggestions);
  drupal_alter('tagging_suggestions', $suggestions);
  
  // Validation
  if ( !is_array($suggestions) ) {
    $suggestions = array();
    watchdog(WATCHDOG_WARNING, 'Tagging: Could not parse suggestion array - maybe some hooks are out of bound?');
  }
  // Iam not going to hold the devs hand and validate if we got a valid array with #name / #weight
  uasort($suggestions, 'element_sort');
  // Only show a maximum ammount of suggesitons
  if (variable_get('tagging_show_max_suggestion', 20) > 0) {
    $suggestions = array_slice($suggestions, 0, variable_get('tagging_show_max_suggestion', 20));
  }
  
  $new_field = $suggestions;
  return $new_field;
}

// /**
 // * Saving the variable, whether to show the widget for a taxonomy or not
 // */
// function tagging_form_vocabulary_submit($form, &$form_state) {
  // // set global variable for this taxomony vocabulary
  // variable_set('tagging_inject_' . $form_state['values']['vid'], $form_state['values']['tagging_inject']);
  // return TRUE;
// }
